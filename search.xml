<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>私有化部署Bitwarden密码管理服务</title>
      <link href="/202109/bitwarden-private-deploy/"/>
      <url>/202109/bitwarden-private-deploy/</url>
      
        <content type="html"><![CDATA[<img src="/202109/bitwarden-private-deploy/cover.png" class="" width="0" height="0"><p>Bitwarden 是基佬又发现并推荐的另一个多平台密码管理工具，官方提供免费的存储服务，最赞的还是支持免费的私有化部署！<br>由于官方网站国内访问不畅😭，日常就不方便与家人共用，所以就只好将其私有化部署至自己的NAS上啦😉。</p><img src="/202109/bitwarden-private-deploy/preview.png" class=""><h2 id="私有环境"><a href="#私有环境" class="headerlink" title="私有环境"></a>私有环境</h2><ul><li>家中自建NAS，申请公网IP</li><li>CentOS 7</li><li>Docker</li><li>自有域名</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><blockquote><p>由于密码库的相对私密性，所以端口自然不会使用常规端口，且暂时仅有些服务需要https的支持，需要nginx的反向代理完成，我这边就随机了个端口使用，常规端口就留给日后内网架设服务给家人使用吧。</p></blockquote><ol><li><h3 id="部署-bitwarden"><a href="#部署-bitwarden" class="headerlink" title="部署 bitwarden"></a>部署 bitwarden</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker volume create bitwarden_data // 创建 bitwarden_data 卷<br><br>docker run --name bitwarden \<br>-v bitwarden_data:/data \<br>-p 39434:80<br>--restart always <br>vaultwarden/server<br></code></pre></td></tr></table></figure><p> 浏览器访问 宿主IP:39434 即可看到 Bitwarden 的服务</p></li><li><h3 id="部署-nginx"><a href="#部署-nginx" class="headerlink" title="部署 nginx"></a>部署 nginx</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">docker run --name Nginx \<br>-v /etc/nginx:/etc/nginx \<br>-v /usr/share/nginx:/usr/share/nginx \<br>-p 39435:39435 \<br>nginx<br></code></pre></td></tr></table></figure></li><li><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><p> 由于 Bitwarden 需要 HTTPS 的支持才可以在 chrome 等浏览器中应用，所以我为还需为 Bitwarden 服务反向代理开启 HTTPS。我们当然是使用免费的 <a href="https://letsencrypt.org/zh-cn/docs/">Let’s Encrypt</a>。</p><p> 而证书生成需要验证域名是否为你持有，提供了以下认证方式：</p><ul><li>在 <code>example.com</code> 下配置 DNS 记录</li><li>在 <code>https://example.com/</code> 的已知 URI 下放置一个 HTTP 资源</li></ul><p> 这个时候我们当然选择通过配置DNS记录完成认证获取证书啦，因为私有化的部署嘛，一般就不暴露常规接口啦。</p><p> 通过 docker 运行 certbox 完成证书获取至 nginx 挂载配置文件夹下创建的cert内。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p /etc/nginx/cert <br>docker run -it --rm --name certbot -v /etc/nginx/cert:/etc/letsencrypt certbot/certbot --manual --preferred-challenges dns certonly<br><span class="hljs-comment"># 交互式提问：</span><br><span class="hljs-comment"># 请输入你想认证的域名（多个域名通过逗号或空格分隔）（取消输入 &#x27;c&#x27; ）</span><br>Please enter the domain name(s) you would like on your certificate (comma and/or space separated) (Enter <span class="hljs-string">&#x27;c&#x27;</span> to cancel): vault.example.com<br><span class="hljs-comment"># 请求证书，为 域名 增加 一条 txt 记录，name 为 &quot;_acme-challenge.vault.example.com&quot; ，data 为 &quot;qRbOGoLXA889-IplowmYFlT_dgHYTKya9RBW5l0B73Y&quot;</span><br><span class="hljs-comment"># 完成后可通过下面提示的 google验证工具链接直接验证是否解析成功，验证成功按回车认证即可</span><br>Requesting a certificate <span class="hljs-keyword">for</span> vault.example.com<br>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br>Please deploy a DNS TXT record under the name:<br><br>_acme-challenge.vault.example.com. <br><br>with the following value:<br><br>qRbOGoLXA889-IplowmYFlT_dgHYTKya9RBW5l0B73Y<br><br>Before continuing, verify the TXT record has been deployed. Depending on the DNS<br>provider, this may take some time, from a few seconds to multiple minutes. You can<br>check <span class="hljs-keyword">if</span> it has finished deploying with aid of online tools, such as the Google<br>Admin Toolbox: https://toolbox.googleapps.com/apps/dig/<span class="hljs-comment">#TXT/_acme-challenge.vault.example.com.</span><br>Look <span class="hljs-keyword">for</span> one or more bolded line(s) below the line \<span class="hljs-string">&#x27;;ANSWER\&#x27;</span>. It should show the<br>value(s) you\<span class="hljs-string">&#x27;ve just added.</span><br><span class="hljs-string"></span><br><span class="hljs-string">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="hljs-string">Press Enter to Continue</span><br><span class="hljs-string"># 还有些交互式回答就是些是否订阅及是否同意遵守协议的问答就个人自行选择了</span><br></code></pre></td></tr></table></figure></li><li><h3 id="编写nginx配置"><a href="#编写nginx配置" class="headerlink" title="编写nginx配置"></a>编写nginx配置</h3><p> 新增并编辑 <code>vault.example.com.conf</code> 配置文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/nginx/conf.d/vault.example.com.conf<br></code></pre></td></tr></table></figure> <figure class="highlight bash"><figcaption><span>vault.example.com.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">server&#123;<br>listen 443 ssl http2;<br>server_name vault.example.com;<br>index index.html index.htm default.htm default.html;<br>root /usr/share/nginx/www/vault.example.com;<br><br>add_header Permissions-Policy <span class="hljs-string">&quot;geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(),fullscreen=(self),payment=()&quot;</span>;<br>server_tokens off; <span class="hljs-comment"># 不显示nginx版本信息</span><br><br>ssl_certificate   cert/live/vault.example.com/fullchain.pem;<br>ssl_certificate_key     cert/live/vault.example.com/privkey.pem;<br>ssl_protocols TLSv1.2 TLSv1.1 TLSv1;<br>ssl_prefer_server_ciphers on;<br>ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;<br>ssl_ecdh_curve secp384r1;<br>ssl_session_tickets off;<br><br><span class="hljs-comment"># OCSP stapling</span><br>ssl_stapling on;<br>ssl_stapling_verify on;<br><br>location ^~ /3KD63sjY2dd85 &#123; <span class="hljs-comment"># 指定到自己喜欢的随机数与字母的组合作为密码库服务的入口，增加其隐蔽性</span><br>proxy_set_headerHost <span class="hljs-variable">$host</span>;<br>proxy_set_headerX-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>proxy_hide_headerX-Powered-By;<br>proxy_hide_headerfeature-policy;<br><br>proxy_pass http://宿主IP:39434/; <span class="hljs-comment"># 指向bitwarden服务</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><h3 id="端口转发并应用"><a href="#端口转发并应用" class="headerlink" title="端口转发并应用"></a>端口转发并应用</h3><p> 由于为内网的 NAS 服务，部署完成后当然还需要通过路由器端口转发将 nginx 为 bitwarden服务定的随机端口名转发至外网<br> 至于域名如何与路由器绑定可搜索动态域名之类的，主要就是通过 NAS 定时请求域名更新IP的 URL 完成。</p><p> 浏览器输入 <a href="https://vault.example.com/3KD63sjY2dd85/">https://vault.example.com/3KD63sjY2dd85/</a> ，进入服务</p> <img src="/202109/bitwarden-private-deploy/login.jpg" class=""><p> 到这一步基本就可以完成注册，导入密码库啦。</p><p> 在 APP 及 各平台应用上，都可以找到在右上角点击设置图标的按钮，输入托管服务的网址</p> <img src="/202109/bitwarden-private-deploy/set_service.png" class=""></li><li><h3 id="定时更新证书"><a href="#定时更新证书" class="headerlink" title="定时更新证书"></a>定时更新证书</h3><p> <a href="https://letsencrypt.org/zh-cn/docs/">Let’s Encrypt</a> 证书的有效期是90天，需要定时为其更新证书，所以也就需要为写个脚本定时执行一下</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">touch renew.sh<br>chmod -x renew.sh<br>vi renew.sh<br></code></pre></td></tr></table></figure><p> 编辑更新脚本 </p> <figure class="highlight bash"><figcaption><span>renew.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>docker run -it --rm --name certbot -v /etc/nginx/cert/:/etc/letsencrypt certbot/certbot renew --webroot -w /etc/letsencrypt<br><span class="hljs-comment"># 通过之前生成证书后生成的renew文件夹内的信息，自动更新证书</span><br>docker <span class="hljs-built_in">exec</span> -it Nginx nginx -s reload<br><span class="hljs-comment"># 重启nginx</span><br></code></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑定时任务</span><br>crontab -e<br></code></pre></td></tr></table></figure> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0 0 1 * * ~/renew.sh &gt; ~/letsencrypt.log <span class="hljs-comment">#每月执行一次</span><br></code></pre></td></tr></table></figure></li><li><h3 id="关闭注册功能"><a href="#关闭注册功能" class="headerlink" title="关闭注册功能"></a>关闭注册功能</h3><p> 为自己和家人都注册帐号后，保证安全性，就关闭密码库的注册功能啦。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop bitwarden <br><br>docker run --name bitwarden \<br>-v bitwarden_data:/data \<br>-p 39434:80<br>-e SIGNUP_ALLOWED=<span class="hljs-literal">false</span><br>--restart always <br>vaultwarden/server<br></code></pre></td></tr></table></figure></li></ol><h2 id="遇到的小坑"><a href="#遇到的小坑" class="headerlink" title="遇到的小坑"></a>遇到的小坑</h2><p>通过nginx简单的配置，HTTPS的标识依旧为红色锁，表示着不安全，虽说已不影响使用了；但强迫症的我还是找了下为什么。<br>继而发现了个检测 HTTPS 认证状态的网站：<br><a href="https://securityheaders.com/">SecurityHeaders</a><br>发现是少了一些Header属性以及部分属性已不安全等<br>根据 Missing Header 去谷歌必应搜索添加上即可</p><p>在搜索的过程中发现了下列文章，刚好教你 Apache 和 Nginx 如何配置安全头部信息的文章，对照上述网站可以快速将头部配置完成<br><a href="https://webdock.io/en/docs/how-guides/security-guides/how-to-configure-security-headers-in-nginx-and-apache#7.-permissions-policy">Apache 和 Nginx 如何配置安全头部信息</a></p><blockquote><p>由于我仅此服务需要 HTTPS 的支持，所以不可以使用 HSTS（强制HTTPS），所以也就不可添加以下头部：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Three.js 之博客装逼指北</title>
      <link href="/202108/threejs-blog-fake-x-manual/"/>
      <url>/202108/threejs-blog-fake-x-manual/</url>
      
        <content type="html"><![CDATA[<img src="/202108/threejs-blog-fake-x-manual/cover.png" class="" width="0" height="0"><h2 id="先上效果"><a href="#先上效果" class="headerlink" title="先上效果"></a>先上效果</h2><p>先上最终效果，我的博客虽然干货很少，不过 <del><code>逼格</code></del> 还是令自己满意的，日后也会尝试多多分享，毕竟分享真的很检验对知识的牢固，未发现的知识盲区，也更考验写作能力。</p><p>博客链接: <a href="https://kwokronny.top/">https://kwokronny.top</a></p><img src="/202108/threejs-blog-fake-x-manual/effect.jpg" class=""><h3 id="CSS3-是不够实现我的骚气哒"><a href="#CSS3-是不够实现我的骚气哒" class="headerlink" title="CSS3 是不够实现我的骚气哒~"></a>CSS3 是不够实现我的骚气哒~</h3><p>在建博客前需要看了很多大佬的博客，大佬们的虽然简洁的界面，但内容的深度，文章的逼格，令人神往，无需博客外包装的浮华，就让大家争相阅读。<br>很久没自己设计网站，审美下降了不少，在几天不断的浏览中，定下了要比大家装的好，就得用大家不太常用的技术栈，<code>three.js</code>是我最终选择的装逼方案。</p><h2 id="开始装逼"><a href="#开始装逼" class="headerlink" title="开始装逼"></a>开始装逼</h2><h3 id="寻找模型"><a href="#寻找模型" class="headerlink" title="寻找模型"></a>寻找模型</h3><p>希望通过 3D 的效果达到 装逼 的目的，需要先建模，这玩意学起来一时半会是不可能的，所以就开始寻找免费非商用的 3D 模型，在免费的素材中寻找了许多的素材，最终选择了热爱的 MineCraft 的人物模型。</p><blockquote><p><a href="https://sketchfab.com/">SketchFab(https://sketchfab.com/)</a></p></blockquote><img src="/202108/threejs-blog-fake-x-manual/zombie_sketchfab.png" class=""><p>下载模型选择 GLTF，我们找的示例让我们引用的即是 GLTFLoader。当然有时也会下载到一些导出有问题的，亦可以下载原始结构，再通过 3D 编辑器 重新导出，此处推荐 <a href="https://www.blender.org/">Blender3D</a>，我选择的模型上传者也刚好同名，也不知道是不是该软件商提供的。</p><img src="/202108/threejs-blog-fake-x-manual/3d_download.png" class=""><h3 id="尝试编写"><a href="#尝试编写" class="headerlink" title="尝试编写"></a>尝试编写</h3><p>之后就先开始了 <code>three.js</code> 的尝试性编写，首先就是要先看 three.js 的文档了，进入官网，里面有许多的优秀案例及示例。</p><blockquote><p><a href="https://threejs.org/">three.js 文档</a><br>建议先在网上先迅速阅读了 3d 的相关基础知识，及大佬们写的手把手教你玩 three.js 之类的文章</p></blockquote><p>我的学习方法很多时候是先抄作业的基础上尝试查阅属性、改变属性，我们可以先从示例找到可以抄的<a href="https://threejs.org/examples/#webgl_animation_skinning_blending">示例</a>先，我选的模型刚好有相关的三个骨架动画，所以阅读此示例的源码，可以优先将下载的模型引入并动起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">html</span>,</span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.bg-canvas</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-canvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/three@0.131.3/build/three.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/three@0.131.3/examples/js/loaders/GLTFLoader.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> scene, renderer, camera, container;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> mixer, clock, actions;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-comment">// 获取绘制容器及容器尺寸</span></span><br><span class="javascript">          container = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.bg-canvas&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">var</span> width = container.getBoundingClientRect().width;</span><br><span class="javascript">          <span class="hljs-keyword">var</span> height = container.getBoundingClientRect().height;</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-comment">// 实例化透视摄像机，我们看见的即是此摄像机的视角。</span></span><br><span class="javascript">          camera = <span class="hljs-keyword">new</span> THREE.PerspectiveCamera(<span class="hljs-number">45</span>, width / height, <span class="hljs-number">1</span>, <span class="hljs-number">2000</span>);</span><br><span class="javascript">          camera.position.set(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">16</span>);</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-comment">// 让模型帧动画按此实例化的时钟更新</span></span><br><span class="javascript">          clock = <span class="hljs-keyword">new</span> THREE.Clock();</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-comment">// 实例化场景</span></span><br><span class="javascript">          scene = <span class="hljs-keyword">new</span> THREE.Scene();</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-comment">// 实例化半球光，先把场景按灯光颜色照亮</span></span><br><span class="javascript">          <span class="hljs-keyword">var</span> hemiLight = <span class="hljs-keyword">new</span> THREE.HemisphereLight(<span class="hljs-number">0xf2f2f2</span>, <span class="hljs-number">0xf2f2f2</span>);</span><br><span class="javascript">          hemiLight.position.set(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">0</span>);</span><br><span class="javascript">          scene.add(hemiLight);</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-comment">// 实例化太阳光，照亮的同时，为模型添加上阴影</span></span><br><span class="javascript">          <span class="hljs-keyword">var</span> dirLight = <span class="hljs-keyword">new</span> THREE.DirectionalLight(<span class="hljs-number">0xffffff</span>);</span><br><span class="javascript">          dirLight.position.set(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>, <span class="hljs-number">0</span>);</span><br><span class="javascript">          dirLight.castShadow = <span class="hljs-literal">true</span>;</span><br><span class="javascript">          dirLight.shadow.camera.near = <span class="hljs-number">0.1</span>;</span><br><span class="javascript">          dirLight.shadow.camera.far = <span class="hljs-number">60</span>;</span><br><span class="javascript">          scene.add(dirLight);</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-keyword">var</span> loader = <span class="hljs-keyword">new</span> THREE.GLTFLoader();</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-comment">// 加载模型</span></span><br><span class="javascript">          loader.load(<span class="hljs-string">&quot;./zombie.gltf&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">gltf</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> model = gltf.scene;</span><br><span class="javascript">            model.traverse(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">object</span>) </span>&#123;</span><br><span class="javascript">              <span class="hljs-keyword">if</span> (object.isMesh) &#123;</span><br><span class="javascript">                object.frustumCulled = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                <span class="hljs-comment">// 投射阴影</span></span><br><span class="javascript">                object.castShadow = <span class="hljs-literal">true</span>;</span><br><span class="javascript">              &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">            model.position.set(<span class="hljs-number">0.6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2.5</span>);</span><br><span class="javascript">            model.scale.set(<span class="hljs-number">1.5</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">1.5</span>);</span><br><span class="javascript">            scene.add(model);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 实例化动画混合器</span></span><br><span class="javascript">            mixer = <span class="hljs-keyword">new</span> THREE.AnimationMixer(model);</span><br><span class="javascript">            actions = &#123;</span><br><span class="javascript">              <span class="hljs-attr">push_up</span>: mixer.clipAction(gltf.animations[<span class="hljs-number">0</span>]),</span><br><span class="javascript">              <span class="hljs-attr">idle</span>: mixer.clipAction(gltf.animations[<span class="hljs-number">1</span>]),</span><br><span class="javascript">              <span class="hljs-attr">walk</span>: mixer.clipAction(gltf.animations[<span class="hljs-number">2</span>]),</span><br><span class="javascript">            &#125;;</span><br><span class="javascript">            actions.idle.play();</span><br><span class="javascript">            <span class="hljs-comment">// loader 需要时间加载，所以我们的渲染动画行为需要在loader的回调函数内</span></span><br><span class="javascript">            animate();</span><br><span class="javascript">          &#125;);</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-comment">// 实例化 WebGL渲染器，相关配置可以对照着文档调整</span></span><br><span class="javascript">          renderer = <span class="hljs-keyword">new</span> THREE.WebGLRenderer(&#123; <span class="hljs-attr">alpha</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">antialias</span>: <span class="hljs-literal">true</span> &#125;);</span><br><span class="javascript">          renderer.setPixelRatio(<span class="hljs-built_in">window</span>.devicePixelRatio);</span><br><span class="javascript">          renderer.setSize(width, height);</span><br><span class="javascript">          renderer.outputEncoding = THREE.sRGBEncoding;</span><br><span class="javascript">          renderer.shadowMap.enabled = <span class="hljs-literal">true</span>;</span><br><span class="javascript"></span><br><span class="javascript">          renderer.setSize(width, height);</span><br><span class="javascript">          container.appendChild(renderer.domElement);</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 动画循环</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          requestAnimationFrame(animate);</span><br><span class="javascript">          <span class="hljs-keyword">var</span> delta = clock.getDelta();</span><br><span class="javascript">          mixer.update(delta);</span><br><span class="javascript">          render();</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          renderer.render(scene, camera);</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        init();</span><br><span class="javascript">      &#125;)();</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/202108/threejs-blog-fake-x-manual/zombie_demo.gif" class=""><p>上面示例完成后，我们通过抄作业，大致了解了如果加入模型，动画渲染，摄像头视角等，对照着相关的类，查阅一遍属性及函数，就可以大概掌握其用法啦。</p><blockquote><p>皮肤纹理我忘记是在哪里拿到的了，可能是在别的下载网站找到模型中 纹理贴图的 UV 刚好一致的 图片，替换图片即可，需要的可自行下载</p><center><img src="/202108/threejs-blog-fake-x-manual/zombie_texture.png" class=""></center></blockquote><h3 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h3><p>那只有一个主角相对单调，我们可以根据我们抄作业学习到的，加一些其它模型，丰富场景。</p><p>最终决定加入这个<a href="https://sketchfab.com/3d-models/carriage-with-pumpkins-2a50986ce81a4fea850dc43efeb40009">模型</a></p><img src="/202108/threejs-blog-fake-x-manual/carriage.png" class=""><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// loader 是已实例化的加载器，无须多次实例化加载器加载模型</span><br>loader.load(<span class="hljs-string">&quot;/gltf/pumpkin.gltf&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">gltf</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> model = gltf.scene;<br>  model.traverse(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">object</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (object.isMesh) &#123;<br>      object.frustumCulled = <span class="hljs-literal">false</span>;<br>      object.castShadow = <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;);<br>  model.rotation.set(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  model.position.set(<span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>, -<span class="hljs-number">2.4</span>);<br>  <span class="hljs-keyword">let</span> scale = <span class="hljs-number">0.33</span>;<br>  model.scale.set(scale, scale, scale);<br>  scene.add(model);<br>&#125;);<br><span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>场景还没有给他加地面，Zombie 和 南瓜车 还似悬在空中，需要再为场景加一块地。随意搜索了张 MineCraft 的草地贴图，在 three.js 示例 中找到有可能关联的示例，刚好第一个就有草地，用小学的英语发现了该代码片段。</p><img src="/202108/threejs-blog-fake-x-manual/example_ground.png" class=""><p>由于设想给这个 3D 效果加上些简单交互，为了不太违和，将这个效果似展厅的方式展现，可以通过按钮控制主体的旋转以及 Zombie 的动作切换，最终选择了 CylinderGeometry(圆柱几何体)，完成主体的效果。</p><p>其中主体的效果我们还需要不断的调整他到一个合适的位置，且当操控旋转时，需要一起多个几何体一同旋转，所以我们需要给这 3 个主体 群组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 建立一个 3D对象，将主体效果的 3个主体 包括进来，统一操控</span><br>stage = <span class="hljs-keyword">new</span> THREE.Object3D();<br>scene.add(stage);<br><br><span class="hljs-comment">// 新增的草地</span><br><br><span class="hljs-keyword">var</span> groundTexture = <span class="hljs-keyword">new</span> THREE.TextureLoader().load(<span class="hljs-string">&quot;/gltf/textures/grass.png&quot;</span>);<br><span class="hljs-comment">//设置纹理的水平与垂直应用重复渲染</span><br>groundTexture.wrapS = groundTexture.wrapT = THREE.RepeatWrapping;<br><span class="hljs-comment">//设置纹理的重复渲染次数</span><br>groundTexture.repeat.set(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br><span class="hljs-comment">// 增加材质的清晰度</span><br>groundTexture.anisotropy = <span class="hljs-number">16</span>;<br>groundTexture.encoding = THREE.sRGBEncoding;<br><br><span class="hljs-keyword">var</span> bottomBase = <span class="hljs-keyword">new</span> THREE.Mesh(<span class="hljs-keyword">new</span> THREE.CylinderBufferGeometry(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">32</span>), <span class="hljs-keyword">new</span> THREE.MeshLambertMaterial(&#123; <span class="hljs-attr">map</span>: groundTexture &#125;));<br><span class="hljs-comment">// 材质是否接收阴影</span><br>bottomBase.receiveShadow = <span class="hljs-literal">true</span>;<br>stage.add(bottomBase);<br><br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// 以及将 loader 回调中加入场景 scene.add(model)改为</span><br>stage.add(model);<br></code></pre></td></tr></table></figure><img src="/202108/threejs-blog-fake-x-manual/demo_effect.png" class=""><h3 id="增加危险隔离带"><a href="#增加危险隔离带" class="headerlink" title="增加危险隔离带"></a>增加危险隔离带</h3><p>确认主体效果即布局后，由于 主体效果 主要在右下角，右上角总感觉有些空，适当的想像场景，最后想到了增加隔离带，黄色与绿色的搭配也意外的合适，也就顺带定下了博客的主色等颜色的设计。</p><blockquote><p>最初采用的是 css3 应用 <code>animation</code> 对 <code>background-position</code> 调整达到隔离带的动效，但该方案基础扎实的小伙伴会发现，易引起重绘，CPU 转的嗡嗡的，表示很淦。</p></blockquote><p>所以最近也就抽空将 隔离带 改用 Three.js 完成。<br>首先我们先在官方的示例中尝试抄抄作业，但并没有找到相似关联的示例，我们通过前面抄作业的学习，大概思考出效果的实现方式，常见的自然就是纹理偏移、纹理动画了。</p><blockquote><p>搜索到的纹理操控文章： <a href="https://blog.csdn.net/u014291990/article/details/103374603">Threejs 纹理对象 Texture 阵列、偏移、旋转(纹理动画)</a></p></blockquote><p>最终隔离带的代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 因纹理变量需要给animate函数引用，所以需要在外面声明此纹理变量</span><br><span class="hljs-keyword">var</span> warningTexture;<br><br><span class="hljs-comment">//...</span><br><span class="hljs-comment">//function init()&#123;</span><br>warningTexture = <span class="hljs-keyword">new</span> THREE.TextureLoader().load(<span class="hljs-string">&quot;/img/warning_zone.png&quot;</span>);<br>warningTexture.wrapS = THREE.RepeatWrapping;<br>warningTexture.repeat.set(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">var</span> warningBar = <span class="hljs-keyword">new</span> THREE.Mesh(<br>  <span class="hljs-comment">// PlaneGeometry平面缓冲几何体</span><br>  <span class="hljs-keyword">new</span> THREE.PlaneGeometry((<span class="hljs-number">0.8</span> * (<span class="hljs-number">424</span> * <span class="hljs-number">4</span>)) / <span class="hljs-number">60</span>, <span class="hljs-number">0.8</span>),<br>  <span class="hljs-keyword">new</span> THREE.MeshBasicMaterial(&#123; <span class="hljs-attr">map</span>: warningTexture &#125;)<br>);<br>scene.add(warningBar);<br><br><span class="hljs-comment">//...</span><br><span class="hljs-comment">//function animate()&#123;</span><br><span class="hljs-comment">//...</span><br>warningTexture.offset.x -= <span class="hljs-number">0.007</span>;<br><span class="hljs-comment">//&#125;</span><br></code></pre></td></tr></table></figure><img src="/202108/threejs-blog-fake-x-manual/effect.gif" class=""><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>我的博客是基于 hexo 改自行尝试编写主题，还未整理成可开源的主题项目，后期有时间也争取分享出来供大家参考。</p><blockquote><p>three.js 我还只是菜鸡，大佬看看热闹，不要笑我，有好的玩法，也望不吝赐教~哈哈哈哈。</p></blockquote><h2 id="附件：最终代码"><a href="#附件：最终代码" class="headerlink" title="附件：最终代码"></a>附件：最终代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">html</span>,</span><br><span class="css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-class">.bg-canvas</span> &#123;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bg-canvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/three@0.131.3/build/three.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/three@0.131.3/examples/js/loaders/GLTFLoader.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">      (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> scene, renderer, camera, container;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> mixer, clock, actions, warningTexture;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          <span class="hljs-comment">// 获取绘制容器及容器尺寸</span></span><br><span class="javascript">          container = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;.bg-canvas&quot;</span>);</span><br><span class="javascript">          <span class="hljs-keyword">var</span> width = container.getBoundingClientRect().width;</span><br><span class="javascript">          <span class="hljs-keyword">var</span> height = container.getBoundingClientRect().height;</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-comment">// 实例化透视摄像机，我们看见的即是此摄像机的视角。</span></span><br><span class="javascript">          camera = <span class="hljs-keyword">new</span> THREE.PerspectiveCamera(<span class="hljs-number">45</span>, width / height, <span class="hljs-number">1</span>, <span class="hljs-number">2000</span>);</span><br><span class="javascript">          camera.position.set(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">16</span>);</span><br><span class="javascript"></span><br><span class="javascript">          clock = <span class="hljs-keyword">new</span> THREE.Clock();</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-comment">// 实例化场景</span></span><br><span class="javascript">          scene = <span class="hljs-keyword">new</span> THREE.Scene();</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-comment">// 实例化半球光，先把场景按灯光颜色照亮</span></span><br><span class="javascript">          <span class="hljs-keyword">var</span> hemiLight = <span class="hljs-keyword">new</span> THREE.HemisphereLight(<span class="hljs-number">0xf2f2f2</span>, <span class="hljs-number">0xf2f2f2</span>);</span><br><span class="javascript">          hemiLight.position.set(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">0</span>);</span><br><span class="javascript">          scene.add(hemiLight);</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-keyword">var</span> dirLight = <span class="hljs-keyword">new</span> THREE.DirectionalLight(<span class="hljs-number">0xffffff</span>);</span><br><span class="javascript">          dirLight.position.set(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>, <span class="hljs-number">0</span>);</span><br><span class="javascript">          dirLight.castShadow = <span class="hljs-literal">true</span>;</span><br><span class="javascript">          dirLight.shadow.camera.near = <span class="hljs-number">0.1</span>;</span><br><span class="javascript">          dirLight.shadow.camera.far = <span class="hljs-number">60</span>;</span><br><span class="javascript">          scene.add(dirLight);</span><br><span class="javascript"></span><br><span class="javascript">          warningTexture = <span class="hljs-keyword">new</span> THREE.TextureLoader().load(<span class="hljs-string">&quot;./warning_zone.png&quot;</span>);</span><br><span class="javascript">          warningTexture.wrapS = THREE.RepeatWrapping;</span><br><span class="javascript">          warningTexture.repeat.set(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>);</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-keyword">var</span> warningBar = <span class="hljs-keyword">new</span> THREE.Mesh(</span><br><span class="javascript">            <span class="hljs-comment">// PlaneGeometry平面缓冲几何体</span></span><br><span class="javascript">            <span class="hljs-keyword">new</span> THREE.PlaneGeometry((<span class="hljs-number">0.8</span> * (<span class="hljs-number">424</span> * <span class="hljs-number">4</span>)) / <span class="hljs-number">60</span>, <span class="hljs-number">0.8</span>),</span><br><span class="javascript">            <span class="hljs-keyword">new</span> THREE.MeshBasicMaterial(&#123; <span class="hljs-attr">map</span>: warningTexture &#125;)</span><br><span class="javascript">          );</span><br><span class="javascript">          warningBar.position.set(<span class="hljs-number">0</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">5.4</span>);</span><br><span class="javascript">          warningBar.rotation.set(<span class="hljs-number">0</span>, -<span class="hljs-number">0.3</span>, -<span class="hljs-number">0.1</span>);</span><br><span class="javascript">          scene.add(warningBar);</span><br><span class="javascript"></span><br><span class="javascript">          stage = <span class="hljs-keyword">new</span> THREE.Object3D();</span><br><span class="javascript">          scene.add(stage);</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-keyword">var</span> groundTexture = <span class="hljs-keyword">new</span> THREE.TextureLoader().load(<span class="hljs-string">&quot;./textures/grass.png&quot;</span>);</span><br><span class="javascript">          groundTexture.wrapS = groundTexture.wrapT = THREE.RepeatWrapping;</span><br><span class="javascript">          groundTexture.repeat.set(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>);</span><br><span class="javascript">          groundTexture.anisotropy = <span class="hljs-number">16</span>;</span><br><span class="javascript">          groundTexture.encoding = THREE.sRGBEncoding;</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-keyword">var</span> bottomBase = <span class="hljs-keyword">new</span> THREE.Mesh(<span class="hljs-keyword">new</span> THREE.CylinderBufferGeometry(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">32</span>), <span class="hljs-keyword">new</span> THREE.MeshLambertMaterial(&#123; <span class="hljs-attr">map</span>: groundTexture &#125;));</span><br><span class="javascript">          bottomBase.receiveShadow = <span class="hljs-literal">true</span>;</span><br><span class="javascript">          stage.add(bottomBase);</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-keyword">var</span> loader = <span class="hljs-keyword">new</span> THREE.GLTFLoader();</span><br><span class="javascript"></span><br><span class="javascript">          loader.load(<span class="hljs-string">&quot;./pumpkin.gltf&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">gltf</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> model = gltf.scene;</span><br><span class="javascript">            model.traverse(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">object</span>) </span>&#123;</span><br><span class="javascript">              <span class="hljs-keyword">if</span> (object.isMesh) &#123;</span><br><span class="javascript">                object.frustumCulled = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                object.castShadow = <span class="hljs-literal">true</span>;</span><br><span class="javascript">              &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">            model.rotation.set(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="javascript">            model.position.set(<span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>, -<span class="hljs-number">2.4</span>);</span><br><span class="javascript">            <span class="hljs-keyword">let</span> scale = <span class="hljs-number">0.33</span>;</span><br><span class="javascript">            model.scale.set(scale, scale, scale);</span><br><span class="javascript">            stage.add(model);</span><br><span class="javascript">          &#125;);</span><br><span class="javascript">          <span class="hljs-comment">// 加载模型</span></span><br><span class="javascript">          loader.load(<span class="hljs-string">&quot;./zombie.gltf&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">gltf</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> model = gltf.scene;</span><br><span class="javascript">            model.traverse(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">object</span>) </span>&#123;</span><br><span class="javascript">              <span class="hljs-keyword">if</span> (object.isMesh) &#123;</span><br><span class="javascript">                object.frustumCulled = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                <span class="hljs-comment">// 投射阴影</span></span><br><span class="javascript">                object.castShadow = <span class="hljs-literal">true</span>;</span><br><span class="javascript">              &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">            model.position.set(<span class="hljs-number">0.6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2.5</span>);</span><br><span class="javascript">            model.scale.set(<span class="hljs-number">1.5</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">1.5</span>);</span><br><span class="javascript">            stage.add(model);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 实例化动画混合器</span></span><br><span class="javascript">            mixer = <span class="hljs-keyword">new</span> THREE.AnimationMixer(model);</span><br><span class="javascript">            actions = &#123;</span><br><span class="javascript">              <span class="hljs-attr">push_up</span>: mixer.clipAction(gltf.animations[<span class="hljs-number">0</span>]),</span><br><span class="javascript">              <span class="hljs-attr">idle</span>: mixer.clipAction(gltf.animations[<span class="hljs-number">1</span>]),</span><br><span class="javascript">              <span class="hljs-attr">walk</span>: mixer.clipAction(gltf.animations[<span class="hljs-number">2</span>]),</span><br><span class="javascript">            &#125;;</span><br><span class="javascript">            actions.walk.play();</span><br><span class="javascript">            animate();</span><br><span class="javascript">          &#125;);</span><br><span class="javascript"></span><br><span class="javascript">          <span class="hljs-comment">// 实例化 WebGL渲染器，相关配置可以对照着文档调整</span></span><br><span class="javascript">          renderer = <span class="hljs-keyword">new</span> THREE.WebGLRenderer(&#123; <span class="hljs-attr">alpha</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">antialias</span>: <span class="hljs-literal">true</span> &#125;);</span><br><span class="javascript">          renderer.setPixelRatio(<span class="hljs-built_in">window</span>.devicePixelRatio);</span><br><span class="javascript">          renderer.setSize(width, height);</span><br><span class="javascript">          renderer.outputEncoding = THREE.sRGBEncoding;</span><br><span class="javascript">          renderer.shadowMap.enabled = <span class="hljs-literal">true</span>;</span><br><span class="javascript"></span><br><span class="javascript">          renderer.setSize(width, height);</span><br><span class="javascript">          container.appendChild(renderer.domElement);</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">animate</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          requestAnimationFrame(animate);</span><br><span class="javascript">          <span class="hljs-keyword">var</span> delta = clock.getDelta();</span><br><span class="javascript">          warningTexture.offset.x -= <span class="hljs-number">0.007</span>;</span><br><span class="javascript">          mixer.update(delta);</span><br><span class="javascript">          render();</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">render</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">          renderer.render(scene, camera);</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        init();</span><br><span class="javascript">      &#125;)();</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Three.js </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 element-ui 开源的 saas 业务扩展</title>
      <link href="/202108/element-ui-saas-extend/"/>
      <url>/202108/element-ui-saas-extend/</url>
      
        <content type="html"><![CDATA[<img src="/202108/element-ui-saas-extend/cover.png" class="" width="0" height="0"><h1 id="Element-SaaS-扩展"><a href="#Element-SaaS-扩展" class="headerlink" title="Element SaaS 扩展"></a>Element SaaS 扩展</h1><p><a href="https://www.npmjs.com/package/element-ui-saas-extend"><img src="https://img.shields.io/npm/v/element-ui-saas-extend"></a> <a href="https://www.npmjs.com/package/element-ui-saas-extend"><img src="https://img.shields.io/npm/dt/element-ui-saas-extend"></a></p><p>由于近期工作主要偏向 SaaS 业务开发，开发内容在表单交互及表格上等开发重复性也很高，基于项目大多应用 element 套件开发，所以就萌发了整理个针对 saas业务 的element组件库saas扩展。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><a href="https://kwokronny.gitee.io/element-ui-saas-extend">Gitee 文档链接</a></li><li><a href="https://kwokronny.github.io/element-ui-saas-extend">Github 文档链接</a></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><h3 id="效率至上"><a href="#效率至上" class="headerlink" title="效率至上"></a>效率至上</h3>  整理常见业务下的重复性工作，汇合成预设组件，高效的完成工作。</li><li><h3 id="尽享自由"><a href="#尽享自由" class="headerlink" title="尽享自由"></a>尽享自由</h3>尽可能的梳理耦合，在兼顾高效的同时，亦给予自由的空间自定义垂直业务下的特殊场景。</li><li><h3 id="简单易用"><a href="#简单易用" class="headerlink" title="简单易用"></a>简单易用</h3>沿用Element UI 的标准开发，尽可能多的示例代码与文档，帮助你快速上手。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn add element-ui-saas-extend -S<br>// or<br>npm install element-ui-saas-extend -S<br></code></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight js"><figcaption><span>static</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br>Vue.use(ElementUI);<br><br><span class="hljs-keyword">import</span> ElementUISaaSExtend <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-ui-saas-extend&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui-saas-extend/lib/theme-chalk/index.css&#x27;</span>;<br>Vue.use(ElementUISaaSExtend);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-bindata-assetfs 实现单文件编译</title>
      <link href="/202105/golang-bindata-static/"/>
      <url>/202105/golang-bindata-static/</url>
      
        <content type="html"><![CDATA[<img src="/202105/golang-bindata-static/cover.png" class="" width="0" height="0"><p>在开发 yoz-comment 评论系统中为了方便部署，在部署的过程中实现单文件无依赖发布，就在想是否可以将静态文件一同编译进应用中；在搜索后找到了 <a href="https://github.com/go-bindata/go-bindata">go-bindata</a> ，为了很方便于 web 应用，最后选择以 go-bindata 为依赖的 <a href="https://github.com/elazarl/go-bindata-assetfs">go-bindata-assetfs</a>。</p><p>话不多说，直接尝试</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">go get -u github.com/go-bindata/go-bindata/...<br>go get github.com/elazarl/go-bindata-assetfs/...<br></code></pre></td></tr></table></figure><ul><li><p>go-bindata 是一个工具，将静态文件生成为 go 代码，文件以 byte 数组的形式存在。</p></li><li><p>go-bindata-assetfs 是文件系统接口的实现，从生成的 go 文件中拿文件数据。</p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go-bindata-assetfs -o static/static.go -pkg=static static_data/...<br></code></pre></td></tr></table></figure><ul><li><p>无标签传参指的是  需转换的文件，</p></li><li><p><code>-o</code> 指转换后导出文件位置，默认为 <code>./bindata.go</code></p></li><li><p><code>-pkg</code> 指导出的包名，默认为 <code>main</code></p></li><li><p><code>-ignore [regexp value] </code> 正则文本忽略匹配文件<br>  如：<code>-ignore &quot;\\.DS_Store|package.json&quot;</code></p></li><li><p><code>-debug</code> 指调试模式，生成的包并不会嵌入文件，而是直接硬盘读取文件，方便前端热更新调试。</p></li><li><p>基础示例</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;project/statics&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><br>assetfs <span class="hljs-string">&quot;github.com/elazarl/go-bindata-assetfs&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br><span class="hljs-comment">// 重新实现文件接口</span><br>staticFS := assetfs.AssetFS&#123;<br>Asset: statics.Asset, <br>AssetDir: statics.AssetDir, <br>AssetInfo: statics.AssetInfo, <br>Prefix: <span class="hljs-string">&quot;static_data&quot;</span>, <span class="hljs-comment">// 访问路由index.html =&gt; 指向文件 static_data/index.html</span><br>Fallback: <span class="hljs-string">&quot;index.html&quot;</span>,<br>&#125;<br><br>http.Handle(<span class="hljs-string">&quot;/&quot;</span>, http.FileServer(&amp;staticFS))<br>http.ListenAndServe(<span class="hljs-string">&quot;:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Gin 示例<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;project/statics&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><br>assetfs <span class="hljs-string">&quot;github.com/elazarl/go-bindata-assetfs&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>engine := gin.Default()<br><br><span class="hljs-comment">// 通过 go-bindata-assetfs 提供的函数将静态资源</span><br>staticFS := assetfs.AssetFS&#123;<br>Asset: statics.Asset,<br>AssetDir: statics.AssetDir, <br>AssetInfo: statics.AssetInfo, <br>Prefix: <span class="hljs-string">&quot;static_data&quot;</span>, <span class="hljs-comment">// 访问路由index.html =&gt; 指向文件 static_data/index.html</span><br>Fallback: <span class="hljs-string">&quot;index.html&quot;</span>,<br>&#125;<br>engine.StaticFS(<span class="hljs-string">&quot;/&quot;</span>, &amp;staticFS) <span class="hljs-comment">//配置静态资源文件路由</span><br>engine.Run(<span class="hljs-string">&quot;:8080&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yoz-comment 开源评论系统</title>
      <link href="/202105/yoz-comment/"/>
      <url>/202105/yoz-comment/</url>
      
        <content type="html"><![CDATA[<img src="/202105/yoz-comment/cover.png" class="" width="0" height="0"><h1 id="开源的评论系统"><a href="#开源的评论系统" class="headerlink" title="开源的评论系统"></a>开源的评论系统</h1><p><a href="https://github.com/hiyoz/yoz-comment"><img src="https://img.shields.io/github/go-mod/go-version/hiyoz/yoz-comment" alt="Go Version"></a> <a href="https://github.com/hiyoz/yoz-comment"><img src="https://img.shields.io/github/license/hiyoz/yoz-comment" alt="License"></a></p><img src="/202105/yoz-comment/preview.jpg" class=""><p>建立博客，原用着<a href="https://github.com/utterance/utterances">utterance</a>评论系统，方便易用，但留言者都需要登录后方可留言过于繁琐且减少留言积极性，支持自搭建的评论系统大部分为python开发，需要在服务器安装一定的依赖等，因为与基友共用服务器，不想弄乱服务器环境，顺便练手玩下golang，便自己造了这个轮子。<br>同时也欢迎大家提 Issues 指正或提交 Pull Request 优化</p><ul><li><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>多级评论</li><li>部署简单，可视化配置</li><li>支持MySQL、PostgreSQL</li><li>支持响应式</li><li>支持 明/暗 主题</li><li>接入 Gravatar 头像显示</li><li>支持敏感词识别</li><li>支持邮件通知自己 及 SendCloud平台 发信通知留言者有回复</li></ul></li></ul><blockquote><p>由于 gorm.io/driver/sqlite 中依赖的 go-sqlite3 需要开启 CGO 支持，编译跨平台需要较为复杂的操作，才疏学浅，只好暂时放弃，有了解的朋友还请多多指教。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><h3 id="部署至服务器"><a href="#部署至服务器" class="headerlink" title="部署至服务器"></a>部署至服务器</h3><ul><li><h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run \<br> -v /deploy_dir:/app \ <span class="hljs-comment">#部署位置</span><br> -p 9975:9975 \ <span class="hljs-comment">#端口</span><br> --name yoz-comment \ <span class="hljs-comment">#容器名称</span><br> hiyoz/yoz-comment<br></code></pre></td></tr></table></figure></li><li><h4 id="直接部署"><a href="#直接部署" class="headerlink" title="直接部署"></a>直接部署</h4>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nohup ./yoz-comment &gt; /dev/null 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure></li></ul></li><li><h3 id="【可选】SendCloud-发信通知"><a href="#【可选】SendCloud-发信通知" class="headerlink" title="【可选】SendCloud 发信通知"></a>【可选】SendCloud 发信通知</h3><p>  为增加站点的互动，很多用户留言后通常无法得知自己的留言得到回复，也就减少了网站的互动性，但由于常见的邮箱存在被拦截SMTP发信问题，且SMTP协议直接发送会暴露服务器站点位置，所以就需要借助发信平台增强互动性啦，选用SendCloud原因是我好朋友与我共享了此平台的账号使用，后期需要增加其它平台可以提交pull-request（对开源项目管理经验少，如有需要还请不吝赐教）</p><blockquote><p>提供的邮件模板代码</p></blockquote>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;9999&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none !important; font-size:0; line-height:0&quot;</span>&gt;</span>你在 KwokRonny 博客上的留言有回复啦<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:white;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA; line-height:180%; padding:0 15px 12px;width:500px;margin:100px auto;color:#555555;font-family:Century Gothic,Trebuchet MS,Hiragino Sans GB,微软雅黑,Microsoft Yahei,Tahoma,Helvetica,Arial,SimSun,sans-serif;font-size:14px;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-bottom:1px solid #DDD;font-size:16px;font-weight:normal;padding:13px 0 10px 0;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #12ADDB;font-weight: bold;&quot;</span>&gt;</span><span class="hljs-symbol">&amp;gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>你在 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://kwokronny.top&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-decoration:none;color: #12ADDB;&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>KwokRonny<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> 博客上的留言有回复啦！<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;padding:0 12px 0 12px;margin-top:18px&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>%you% 同学，你在文章《<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%post_url%&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-decoration:none; color:#12addb&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>%post%<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>》上的评论:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: #f5f5f5;border: 0 solid #DDD;padding: 10px 15px;margin:18px 0&quot;</span>&gt;</span>%you_comment%<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>%comment_author% 给你的回复如下:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: #f5f5f5;border: 0 solid #DDD;padding: 10px 15px;margin:18px 0&quot;</span>&gt;</span>%comment%<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>你可以点击 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%comment_url%&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-decoration:none; color:#12addb&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>查看回复的完整內容 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>，欢迎再来玩呀~<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  <strong>预览</strong></p>  <img src="/202105/yoz-comment/mail_preview.png" class=""></li><li><h3 id="配置安装"><a href="#配置安装" class="headerlink" title="配置安装"></a>配置安装</h3><p>  运行后会检测到应用目录下 <code>./config.yaml</code> 是否存在，判断是否运行配置过程。</p><p>  访问 <a href="http://localhost:9975/">http://localhost:9975</a> 会进入安装配置页面</p><blockquote><p>SMTP邮件通知使用同域名的邮箱发送邮件通知避免邮件发送失败或进入垃圾桶</p></blockquote>  <img src="/202105/yoz-comment/install.jpg" class=""><p>  根据配置页面操作完成后会在相应位置生成 <code>config.yaml</code> 配置文件后，手动重新启动应用</p></li><li><h3 id="在页面中引用代码"><a href="#在页面中引用代码" class="headerlink" title="在页面中引用代码"></a>在页面中引用代码</h3><p>  在展示评论组件的位置添加以下代码</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> </span><br><span class="hljs-tag"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;YozComment&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;部署地址&#125;/client.js&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">token</span>=<span class="hljs-string">&quot;页面唯一TOKEN&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">theme</span>=<span class="hljs-string">&quot;&#123;light|dark&#125;&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h3 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h3><p>  可以通过自定义 扰乱字符 为后台管理入口</p><p>  如设置路由为 <code>gkqoSDBxv43fgL9CP3pV9u</code></p><p>  则后台管理路由为 https://{部署址址}/gkqoSDBxv43fgL9CP3pV9u/</p>  <img src="/202105/yoz-comment/manage.jpg" class=""></li></ul><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ul><li><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li><p>评论组件部分</p><p>  应用 Typescript 开发，开发架构及思路部分主要借鉴 <a href="https://github.com/utterance/utterances">utterance</a> 。通过在网站内嵌 iframe 减少对代码间的冲突与安全问题。</p><p>  运行以下命令会将相关静态文件编译至 templates/web 文件夹下，并前端热更新</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm start<br></code></pre></td></tr></table></figure></li><li><p>后台管理</p><p>  采用纯前端方式通过  CDN 引用 iviewui+axios完成配置页面，管理页面及登陆界面</p></li></ul></li><li><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>  后端运用 gin+gorm 开发，开发架构主要是MVC架构，并将所有静态资源 通过 <a href="https://github.com/elazarl/go-bindata-assetfs/">go-bindata-assetfs</a> 打包进应用，方便部署。</p><p>  安装 <a href="https://github.com/pilu/fresh">fresh</a> 开启热更新</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run bindata-install <span class="hljs-comment"># 全局安装 go-bindata-assetfs 工具</span><br><br>npm run bindata-debug <span class="hljs-comment"># 在开发中，方便调试，通过 gin-bindata 提供的 debug 方法 对静态资源通过链接的方法调用</span><br><br>go get github.com/pilu/fresh <span class="hljs-comment"># 热更新全局工具安装</span><br><br>fresh <span class="hljs-comment"># 热更新调试开发</span><br></code></pre></td></tr></table></figure></li><li><h3 id="构建打包"><a href="#构建打包" class="headerlink" title="构建打包"></a>构建打包</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run build <span class="hljs-comment"># 构建评论组件静态文件至templates/web</span><br><br>npm run bindata <span class="hljs-comment"># 将templates/web下的静态文件打包进二进制文件，方便部署</span><br><br>go build main.go <span class="hljs-comment"># 生成应用</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> golang </tag>
            
            <tag> typescript </tag>
            
            <tag> parcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuex实现历史记录</title>
      <link href="/202101/vuex-develop-history/"/>
      <url>/202101/vuex-develop-history/</url>
      
        <content type="html"><![CDATA[<img src="/202101/vuex-develop-history/cover.png" class="" width="0" height="0"><p>最近自研着一个可视化操作平台，其中涉及到用户操作后可撤销或重做，在网上搜了一些解决思路，完善自己所设想的解决思路。</p><h2 id="历史记录需求的要点"><a href="#历史记录需求的要点" class="headerlink" title="历史记录需求的要点"></a>历史记录需求的要点</h2><ul><li>可存储在 localStorage 中</li><li>可多次撤销或多次重做</li><li>点击列表中的一项，将历史倒退或前进至指定位置</li></ul><p>看似简单的需求，在基础建设设计上的错误，亦会在未来导致更多的工作量。所以结合上面两点的要求，发现 vuex 的基本思路非常适合完成这个需求，redux 同样。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><blockquote><p>此项目用了 typescript 来加强代码的严谨性，方便日后维护，大家简单看个思路。</p></blockquote><h3 id="1-先定义历史记录的数据结构"><a href="#1-先定义历史记录的数据结构" class="headerlink" title="1. 先定义历史记录的数据结构"></a>1. 先定义历史记录的数据结构</h3>  <figure class="highlight typescript"><figcaption><span>vue.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> HistoryItem &#123;<br>  <span class="hljs-attr">timestrap</span>: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 记录时间戳</span><br>  name: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 记录名称</span><br>  redo: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 重做Mutation</span><br>  undo: <span class="hljs-built_in">string</span>; <span class="hljs-comment">// 撤销Mutation</span><br>  redoParams: <span class="hljs-built_in">any</span>[]; <span class="hljs-comment">// 重做Mutation提交参数</span><br>  undoParams: <span class="hljs-built_in">any</span>[]; <span class="hljs-comment">// 撤销Mutation提交参数</span><br>&#125;<br><br><span class="hljs-keyword">interface</span> HistoryStatus &#123;<br>  <span class="hljs-attr">historys</span>: HistoryItem[]; <span class="hljs-comment">// 记录history数组</span><br>  _currentHistory: <span class="hljs-built_in">number</span>; <span class="hljs-comment">// 当前节点索引</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-编写-History-状态模块"><a href="#2-编写-History-状态模块" class="headerlink" title="2. 编写 History 状态模块"></a>2. 编写 History 状态模块</h3><p>  编写基础操作history状态的vuex <code>module</code>，创建记录的<code>Mutation</code>，重做和撤销的Action</p><blockquote><p>一条记录是包含对这个步骤的执行<code>redo</code>操作与撤销<code>undo</code>操作的。所以在用户点击列表其中一项时，应该是循环回退到当前项的前一项undo，或循环redo到当前项<br>所以需要增加一条空记录，方便用户点击空记录撤销最初的操作。</p><img src="/202101/vuex-develop-history/history_dialog.png" class=""><p>运用了<code>vuex-module-decorators</code> 装饰器，写更易维护的代码</p></blockquote>  <figure class="highlight typescript"><figcaption><span>store/modules/History.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; VuexModule, Module, Mutation, Action &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex-module-decorators&quot;</span>;<br><br><span class="hljs-meta">@Module</span>(&#123; <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span> &#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HistoryModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">VuexModule</span>&lt;<span class="hljs-title">HistoryStatus</span>&gt; <span class="hljs-title">implements</span> <span class="hljs-title">HistoryStatus</span> </span>&#123;<br>  <span class="hljs-comment">/** </span><br><span class="hljs-comment">   * 初始化一个空记录的原因主要是方便列表操作时：</span><br><span class="hljs-comment">   * 当用户点击最早的一条记录时，可以正常撤销用户操作的第一步</span><br><span class="hljs-comment">  **/</span><br>  <span class="hljs-keyword">public</span> historys: HistoryItem[] = [<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">`打开`</span>,<br>      <span class="hljs-attr">timestrap</span>: <span class="hljs-built_in">Date</span>.now(),<br>      <span class="hljs-attr">redo</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-attr">redoParams</span>: [],<br>      <span class="hljs-attr">undo</span>: <span class="hljs-string">&quot;&quot;</span>,<br>      <span class="hljs-attr">undoParams</span>: [],<br>    &#125;,<br>  ];<br>  <span class="hljs-keyword">public</span> _currentHistory: <span class="hljs-built_in">number</span> = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// getter</span><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">current</span>()&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._currentHistory;<br>  &#125;<br><br>  <span class="hljs-comment">// getter</span><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">historyList</span>(): <span class="hljs-title">HistoryItem</span>[] &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.historys || [];<br>  &#125;<br><br>  <span class="hljs-comment">// 创建历史记录</span><br>  <span class="hljs-meta">@Mutation</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">CREATE_HISTORY</span>(<span class="hljs-params">payload: HistoryItem</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>._currentHistory &lt; <span class="hljs-built_in">this</span>.historys.length - <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-built_in">this</span>.historys = <span class="hljs-built_in">this</span>.historys.slice(<span class="hljs-number">0</span>, <span class="hljs-built_in">this</span>._currentHistory);<br>    &#125;<br>    <span class="hljs-comment">// 由于js的深浅拷贝问题，所以在创建时都需要对数据进行深拷贝</span><br>    <span class="hljs-comment">// 想尝试lodash的clone函数，但发现好像JSON.stringify的方式clone应该更快的，毕竟我们的数据不存在函数</span><br>    <span class="hljs-comment">// 我这里就先不改了，主要是表达出思路即可</span><br>    <span class="hljs-built_in">this</span>.historys.push(_.cloneDeep(payload));<br>    <span class="hljs-built_in">this</span>._currentHistory = <span class="hljs-built_in">this</span>.historys.length - <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Mutation</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">SET_CURRENT_HISTORY</span>(<span class="hljs-params">index: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>._currentHistory = index &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : index;<br>  &#125;<br><br>  <span class="hljs-comment">// 重做</span><br>  <span class="hljs-meta">@Action</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">RedoHistory</span>(<span class="hljs-params">times: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> &#123; state, commit &#125; = <span class="hljs-built_in">this</span>.context;<br>    <span class="hljs-keyword">let</span> historys: HistoryItem[] = state.historys;<br>    <span class="hljs-keyword">let</span> current: <span class="hljs-built_in">number</span> = state._currentHistory;<br>    <span class="hljs-keyword">if</span> (current + times &gt;= historys.length) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">while</span> (times &gt; <span class="hljs-number">0</span>) &#123;<br>      current++;<br>      <span class="hljs-keyword">let</span> history = historys[current];<br>      <span class="hljs-keyword">if</span> (history) &#123;<br>        commit(history.redo, ...history.redoParams, &#123; <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span> &#125;);<br>      &#125;<br>      times--;<br>    &#125;<br>    commit(<span class="hljs-string">&quot;SET_CURRENT_HISTORY&quot;</span>, current);<br>  &#125;<br><br>  <span class="hljs-comment">// 撤销</span><br>  <span class="hljs-meta">@Action</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">UndoHistory</span>(<span class="hljs-params">times: <span class="hljs-built_in">number</span> = <span class="hljs-number">1</span></span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> &#123; state, commit &#125; = <span class="hljs-built_in">this</span>.context;<br>    <span class="hljs-keyword">let</span> historys: HistoryItem[] = state.historys;<br>    <span class="hljs-keyword">let</span> current: <span class="hljs-built_in">number</span> = state._currentHistory;<br>    <span class="hljs-keyword">if</span> (current - times &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">while</span> (times &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">let</span> history = historys[current];<br>      <span class="hljs-keyword">if</span> (history) &#123;<br>        commit(history.undo, ...history.undoParams, &#123; <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span> &#125;);<br>      &#125;<br>      times--;<br>      current--;<br>    &#125;<br>    commit(<span class="hljs-string">&quot;SET_CURRENT_HISTORY&quot;</span>, current);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-编写可以撤销或重做的功能"><a href="#3-编写可以撤销或重做的功能" class="headerlink" title="3. 编写可以撤销或重做的功能"></a>3. 编写可以撤销或重做的功能</h3><p>  完成上面两步后，我们就可以编写各种操作了</p><ol><li><p>编写对数据基础操作的<code>Mutation</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Mutation</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">CREATE_PAGE</span>(<span class="hljs-params">payload: &#123; page: PageItem; index: <span class="hljs-built_in">number</span> &#125;</span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.pages.splice(payload.index, <span class="hljs-number">0</span>, _.cloneDeep(payload.page));<br>  <span class="hljs-built_in">this</span>._currentPage = <span class="hljs-built_in">this</span>.pages.length - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-meta">@Mutation</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">REMOVE_PAGE</span>(<span class="hljs-params">id: <span class="hljs-built_in">string</span></span>)</span> &#123;<br>  <span class="hljs-keyword">let</span> index = <span class="hljs-built_in">this</span>.pages.findIndex(<span class="hljs-function">(<span class="hljs-params">p</span>) =&gt;</span> p.id == id);<br>  index &gt; -<span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">this</span>.pages.splice(index, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>._currentPage == index) &#123;<br>    <span class="hljs-built_in">this</span>._currentPage = <span class="hljs-built_in">this</span>.pages.length &gt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : -<span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将基础操作按要求封装成带保存-&gt;记录-&gt;执行的<code>Action</code></p><figure class="highlight typescript"><figcaption><span>store/modules/Page.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 包装创建页面函数</span><br><span class="hljs-meta">@Action</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">CreatePage</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;page&quot;</span> | <span class="hljs-string">&quot;dialog&quot;</span></span>)</span> &#123;<br>  <span class="hljs-keyword">let</span> &#123; state, commit &#125; = <span class="hljs-built_in">this</span>.context;<br>  <br>  <span class="hljs-comment">// 记录保存即将创建的页面</span><br>  <span class="hljs-keyword">let</span> id = _.uniqueId(<span class="hljs-keyword">type</span>) + <span class="hljs-built_in">Date</span>.now();<br>  <span class="hljs-keyword">let</span> pageName = pageType[<span class="hljs-keyword">type</span>];<br>  <span class="hljs-keyword">let</span> page: PageItem = &#123;<br>    id,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;pageName&#125;</span><span class="hljs-subst">$&#123;state.pages.length + <span class="hljs-number">1</span>&#125;</span>`</span>,<br>    <span class="hljs-keyword">type</span>,<br>    <span class="hljs-attr">layers</span>: [],<br>    <span class="hljs-attr">style</span>: &#123; <span class="hljs-attr">width</span>: <span class="hljs-number">720</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">1280</span> &#125;,<br>  &#125;;<br><br>  <span class="hljs-comment">//创建历史记录</span><br>  <span class="hljs-keyword">let</span> history: HistoryItem = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">`创建<span class="hljs-subst">$&#123;pageName&#125;</span>`</span>,<br>    <span class="hljs-attr">timestrap</span>: <span class="hljs-built_in">Date</span>.now(),<br>    <span class="hljs-attr">redo</span>: <span class="hljs-string">&quot;Page/CREATE_PAGE&quot;</span>,<br>    <span class="hljs-attr">redoParams</span>: [&#123; <span class="hljs-attr">index</span>: state.pages.length - <span class="hljs-number">1</span>, page &#125;],<br>    <span class="hljs-attr">undo</span>: <span class="hljs-string">&quot;Page/REMOVE_PAGE&quot;</span>,<br>    <span class="hljs-attr">undoParams</span>: [id],<br>  &#125;;<br>  <span class="hljs-comment">// 保存记录此历史记录</span><br>  commit(<span class="hljs-string">&quot;Histroy/CREATE_HISTORY&quot;</span>, history, &#123; <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span> &#125;);<br><br>  commit(history.redo, ...history.redoParams, &#123; <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span> &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>  <figure class="highlight typescript"><figcaption><span>store/modules/Page.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Action</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">RemovePage</span>(<span class="hljs-params">id: <span class="hljs-built_in">string</span></span>)</span> &#123;<br>  <span class="hljs-comment">// 记录保存现场状态</span><br>  <span class="hljs-keyword">let</span> index = <span class="hljs-built_in">this</span>.pages.findIndex(<span class="hljs-function">(<span class="hljs-params">p</span>) =&gt;</span> p.id == id);<br>  <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">let</span> page: PageItem = <span class="hljs-built_in">this</span>.context.state.pages[index];<br><br>  <span class="hljs-comment">//创建历史记录</span><br>  <span class="hljs-keyword">let</span> history: HistoryItem = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">`删除 <span class="hljs-subst">$&#123;page.name&#125;</span>`</span>,<br>    <span class="hljs-attr">timestrap</span>: <span class="hljs-built_in">Date</span>.now(),<br>    <span class="hljs-attr">redo</span>: <span class="hljs-string">&quot;Page/REMOVE_PAGE&quot;</span>,<br>    <span class="hljs-attr">redoParams</span>: [id],<br>    <span class="hljs-attr">undo</span>: <span class="hljs-string">&quot;Page/CREATE_PAGE&quot;</span>,<br>    <span class="hljs-attr">undoParams</span>: [&#123; page, index &#125;],<br>  &#125;;<br><br>  <span class="hljs-comment">// 保存记录此历史记录</span><br>  <span class="hljs-built_in">this</span>.context.commit(<span class="hljs-string">&quot;Histroy/CREATE_HISTORY&quot;</span>, history, &#123; <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span> &#125;);<br>  <span class="hljs-built_in">this</span>.context.commit(history.redo, ...history.redoParams, &#123; <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span> &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>  以上，撤销与重做的功能就基本完成了</p><h3 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h3><pre><code>1. 我们现在只需要在使用时创建或删除页面时使用封装的`Action`后<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">create</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>: <span class="hljs-string">&quot;page&quot;</span> | <span class="hljs-string">&quot;dialog&quot;</span></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&quot;Page/CreatePage&quot;</span>, <span class="hljs-keyword">type</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&quot;Page/RemovePage&quot;</span>, id);<br>&#125;<br></code></pre></td></tr></table></figure>2. 配置全局热键<figure class="highlight typescript"><figcaption><span>App.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript">...<br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">let</span> self = <span class="hljs-built_in">this</span>;<br>  hotkeys(<span class="hljs-string">&quot;ctrl+z&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event, handler</span>) </span>&#123;<br>    self.$store.dispatch(<span class="hljs-string">&quot;History/UndoHistory&quot;</span>);<br>  &#125;);<br>  hotkeys(<span class="hljs-string">&quot;ctrl+y&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event, handler</span>) </span>&#123;<br>    self.$store.dispatch(<span class="hljs-string">&quot;History/RedoHistory&quot;</span>);<br>  &#125;);<br>&#125;<br>...<br></code></pre></td></tr></table></figure></code></pre><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2>  <img src="/202101/vuex-develop-history/effect.gif" class="">]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vuex </tag>
            
            <tag> 思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>朋友安利的一款轻量级docker容器可视化管理</title>
      <link href="/202101/recommend-portainer/"/>
      <url>/202101/recommend-portainer/</url>
      
        <content type="html"><![CDATA[<img src="/202101/recommend-portainer/cover.png" class="" width="0" height="0"><p>刚开始玩docker及linux玩的少我来说，有可视化的Docker管理工具真的不要太香了。</p><img src="/202101/recommend-portainer/portainer.png" class=""><h1 id="安装并运行-portainer-镜像"><a href="#安装并运行-portainer-镜像" class="headerlink" title="安装并运行 portainer 镜像"></a>安装并运行 portainer 镜像</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取portainer镜像</span><br>docker pull docker pull portainer/portainer-ce<br><span class="hljs-comment"># 创建 portainer_data docker volume目录</span><br>docker volume create portainer_data<br><span class="hljs-comment"># 创建运行portainer容器</span><br>docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce<br><span class="hljs-comment"># -d 后台运行</span><br><span class="hljs-comment"># -p 映射8000与9000的端口</span><br><span class="hljs-comment"># --name 容器名称</span><br><span class="hljs-comment"># --restart=always docker重启时自动启动容器</span><br><span class="hljs-comment"># -v 映射本地docker.sock 及 新创建的portainer_data volume目录</span><br></code></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>安装完成后，通过 <a href="http://ip:9000/">http://ip:9000/</a> 即可访问，设置服务的用户名密码后</p><img src="/202101/recommend-portainer/set_user.png" class=""><p>前面的映射中已将docker.sock映射了，所以我们直接选择 <code>Local</code> 后 <code>connect</code> 就可以直接使用啦</p><img src="/202101/recommend-portainer/bind_docker_sock.png" class=""><p>Portainer提供一些常用镜像快捷创建的服务 ，数据来源于 github 仓库内的某一资源，由于国内访问问题，导致访问失败，无法使用<br>可直接到 Settings 设置 App Templates 的 URL：</p><blockquote><p>用 jsdelivr 会 免费为 Github 的资源 CDN加速<br><a href="https://cdn.jsdelivr.net/gh/portainer/templates/templates-2.0.json">https://cdn.jsdelivr.net/gh/portainer/templates/templates-2.0.json</a></p></blockquote><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p>有手就行。</p>]]></content>
      
      
      <categories>
          
          <category> 软件分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab 部署踩坑记</title>
      <link href="/202101/docker-gitlab/"/>
      <url>/202101/docker-gitlab/</url>
      
        <content type="html"><![CDATA[<img src="/202101/docker-gitlab/cover.png" class="" width="0" height="0"><p>这篇文章主要<del>水</del>在于我直接安装配置完gitlab后，遇到的几个迷之问题与找到的解决方案。</p><h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><ul><li><p>服务器版本：ubuntu server 18.04.3 (Win10 虚拟机)</p></li><li><p>Docker 版本：19.03.8</p></li><li><p>gitlab 版本：13.5.4</p></li><li><h1 id="gitlab小部分跳转链接url端口错误"><a href="#gitlab小部分跳转链接url端口错误" class="headerlink" title="gitlab小部分跳转链接url端口错误"></a>gitlab小部分跳转链接url端口错误</h1><p>  因隐秘需求，未分配80端口给gitlab服务，可视化配置的过程中修改了访问url，导致出现 gitlab 小部分跳转的链接url端口错误。<br>  由于问题也比较小众，甚至不知如何搜这个问题，在百愁莫展之际，搜了下最基础的部署教程，找到了解决方案，其实也是个很基础的配置问题。</p><blockquote><p>在此教程中找到的答案：<a href="https://segmentfault.com/a/1190000021229534">通过 Docker 快速部署公司内部 GitLab</a></p></blockquote>  <figure class="highlight bash"><figcaption><span>gitlab.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">external_url <span class="hljs-string">&#x27;http://[ip/hostname]:3300&#x27;</span><br><br><span class="hljs-comment"># nginx默认会去external_url中获取端口用以访问，但我们窗口只映射了80，所以还需要nginx指向的端口到80</span><br>nginx[<span class="hljs-string">&#x27;listen_port&#x27;</span>] = 80<br><span class="hljs-comment"># https需要下面这句</span><br><span class="hljs-comment"># nginx[&#x27;redirect_http_to_https_port&#x27;] = 443</span><br><br><span class="hljs-comment"># 配置 1011 端口</span><br>gitlab_rails[<span class="hljs-string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = 1011<br></code></pre></td></tr></table></figure></li><li><p>不知是何原因，我的gitlab还没多少项目存放，每天却按 1G 以上的大小占用了我的硬盘，GITLAB是架设在本地机子中的VM虚拟机的，暂时没空解决这个问题，就只好先对虚拟机扩容了。</p><blockquote><p>发现gitlab应该下的prometheus文件夹大到爆炸，通过查询prometheus的必要性后，我对其直接停用处理了。</p></blockquote>  <figure class="highlight bash"><figcaption><span>gitlab.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 停用prometheus</span><br>prometheus_monitoring[<span class="hljs-string">&#x27;enable&#x27;</span>] = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li></ul><p>按上述修改完成后 重启gitlab就可以啦</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker restart gitlab<br></code></pre></td></tr></table></figure><h1 id="我的gitlab最终效果"><a href="#我的gitlab最终效果" class="headerlink" title="我的gitlab最终效果~"></a>我的gitlab最终效果~</h1><img src="/202101/docker-gitlab/result.png" class="">]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 服务运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stylus-shortcut 加速编写 CSS</title>
      <link href="/202012/stylus-shortcut/"/>
      <url>/202012/stylus-shortcut/</url>
      
        <content type="html"><![CDATA[<img src="/202012/stylus-shortcut/cover.png" class="" width="0" height="0"><p><a href="https://www.npmjs.com/package/stylus-shortcut"><img src="https://img.shields.io/npm/v/stylus-shortcut"></a> <a href="https://www.npmjs.com/package/stylus-shortcut"><img src="https://img.shields.io/npm/dt/stylus-shortcut"></a></p><p>stylus-shortcut 可以加速编写 CSS，通过 stylus 中 mixin 的功能，将样式常用组合合并汇以简单一句，减少代码的编写量；并通过 stylus 循环将常用主题变量生成常用的样式规则，可快捷使用。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><a href="https://kwokronny.gitee.io/stylus-shortcut">Gitee 文档链接</a></li><li><a href="https://kwokronny.github.io/stylus-shortcut">Github 文档链接</a></li></ul><h2 id="开发意图"><a href="#开发意图" class="headerlink" title="开发意图"></a>开发意图</h2><p>编写这个项目最初的目的是在开发一 SaaS 平台时，我已采用 ElementUI 的基础上进行开发，并通过自定义主题覆盖了部分样式及颜色变量后。常常需要在部分元素上为元素命名后仅仅为其加一项间距属性或文本颜色等简单的样式。来回切换样式文件与 DOM 文件，及为不重要的小元素命名，多而烦；或许这也是为什么 Bootstrap 可以一下成为大家热爱的库吧。</p><p>所以我简单通过 stylus 的循环按设计规范生成常用的间距、字体、颜色、边框、flex与阴影等样式，真的非常的方便与快落；事实证明频繁的切换文件是容易忘记自己需要做什么的。<br>再之后，为一些复杂的设计编写样式时，常常在写完 width 时基本下一句可能就是 height，嗒嗒嗒下来，写了许多行，但常常这些伴随着规律，定位时会写 left,top、宽高写完时可能还会再设置个圆角等，写了几年前端后早已厌烦了长长的样式规则。<br>所以我通过 stylus 的 mixin 功能，将编写 CSS 时常用的规律汇成一句，小小的功能，也可以提升大大的效率。<br>编写文档时，也常问自己项目如此的小，是否需要变成一个库呢？我找到了答案，小而简就是这个项目的初心，他解决的是开发中常常忽视的小烦恼，整理出规律增加编写效率也是这个小项目最重要的核心<br>如果你也同我一样存在这些厌烦，不妨试试这个库哟~</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>减少重复性编写样式</li><li>快速将设计规范转化成样式库</li><li>遵循 BEM 命名规则</li><li>小而美，只解决常见但小的麻烦</li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;your-custom-variable-file.styl&quot;</span> <span class="hljs-comment">//引入自定义变量</span><br><span class="hljs-comment">// 同时引入 shortcut.styl mixin.styl</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;stylus-shortcut&quot;</span><br><span class="hljs-comment">// or 单独引入 shortcut.styl</span><br><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;stylus-shortcut/src/shortcut.styl</span><br><span class="hljs-string">// or 单独引入 mixin.styl</span><br><span class="hljs-string">@import &quot;</span>stylus-shortcut/<span class="hljs-attribute">src</span>/mixin.styl<br></code></pre></td></tr></table></figure><blockquote><p>变量与mixin需要在多文件下自动引用可通过stylus-loader<br>如 vue-cli@3 配置示例，在 stylus-loader 中配置 import 全局引入</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//vue.config.js</span><br>modules.export=&#123;<br>  ...<br>  <span class="hljs-attr">css</span>: &#123;<br>    <span class="hljs-comment">// 配置css模块</span><br>    <span class="hljs-attr">loaderOptions</span>: &#123;<br>      <span class="hljs-comment">// 向预处理器 Loader 传递配置选项</span><br>      <span class="hljs-attr">stylus</span>: &#123;<br>        <span class="hljs-attr">import</span>: [<br>          <span class="hljs-string">&quot;your-custom-variable-file.styl&quot;</span>,<br>          <span class="hljs-string">&quot;stylus-shortcut/src/mixin.styl&quot;</span><br>        ]<br>      &#125;<br>    &#125;<br>  &#125;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs variable.styl">yoz_color = &#123;<br>  primary: #1890ff,<br>  link: #1890ff,<br>  success: #52c41a,<br>  warning: #faad14,<br>  error: #f5222d<br>&#125;;<br>yoz_spacing ?= &#123;<br>  &#x27;5&#x27;: 5px,<br>  &#x27;10&#x27;: 10px,<br>  &#x27;20&#x27;: 20px,<br>  &#x27;30&#x27;: 30px<br>&#125;;<br>...<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-h&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-c_primary&quot;</span>&gt;</span>文本颜色primary<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--文本颜色为变量值primary--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box bg-c_primary spac-ml_20&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--背景颜色为primary--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box bg-c_primary spac-mh_20&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--水平外间距--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box bg-c_primary spac-p_20&quot;</span>&gt;</span>内间距<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--四边内间距--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> stylus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安利一款免费好用的开源密码管理软件 - KeePassXC</title>
      <link href="/202011/recommend-keepass/"/>
      <url>/202011/recommend-keepass/</url>
      
        <content type="html"><![CDATA[<img src="/202011/recommend-keepass/cover.png" class="" width="0" height="0"><h2 id="用过的密码管理软件"><a href="#用过的密码管理软件" class="headerlink" title="用过的密码管理软件"></a>用过的密码管理软件</h2><p>推荐前先介绍自己在密码管理上经历过的历程，无兴趣可直接跳过这一段</p><ol><li><h3 id="级别密码制"><a href="#级别密码制" class="headerlink" title="级别密码制"></a>级别密码制</h3><p>统一三个级别的密码，分为：无隐私风险，轻隐私风险，重度隐私风险的密码，密码复杂度按级别升高。方便，只用记三个密码即可尽可能的保护自己的隐私和方便自己的记忆。</p></li><li><h3 id="lastpass"><a href="#lastpass" class="headerlink" title="lastpass"></a>lastpass</h3><p><code>超能小紫</code>最早推荐我用的密码管理的 CHORME 扩展，后来也因为曝出过相关的密码泄漏新闻，所以就试着找个安全些的。</p></li><li><h3 id="1Password"><a href="#1Password" class="headerlink" title="1Password"></a>1Password</h3><p>同样是<code>超能小紫</code>给我安利的，刚好试着免费试用 1 年，试用了几个月，个人在使用上感觉在交互还是不太喜爱，各平台的操作相对不统一，密码生成、删除，修改等操作上有些麻烦，特别是我在新平台注册活登陆时不会自动收集我的信息询问我是否存储，不知是不是我没配置好；这样想想订阅费用还是让我稍稍心痛的。</p></li></ol><h2 id="正式安利-KeePass"><a href="#正式安利-KeePass" class="headerlink" title="正式安利 - KeePass"></a>正式安利 - KeePass</h2><p>KeePass 起初真只是抱着试试的心态，毕竟大概如果有了解的话，KeePass 的相关官网包括网上许多的使用文档中的软件截图，界面风格跟 2000 年基本无异了；我主要电脑是 MacBook 的，一开始还真没打算用这套全平台解决方案，想着再找找，但突然认真看了下网站，发现开源的项目，都有着伟大的开源精神的程序员圈子，一个平台出现了三四种基于 keepass 的第三方版本及各种原生插件。</p><img src="/202011/recommend-keepass/main_big.png" class=""><p>官方版本 KeePass</p><ol><li><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3>开始试着把以前的密码数据导出后，开始试着转移密码到这个新的解决方案的载体时，官方提供的各平台版本，其实在交互上及实用性上都确认不及<code>1Password</code>所带出的基本功能，各平台间交互差异大，且直接无浏览器扩展的支持，有的也只是已从谷歌官方应用扩展商店下架后，博主间传出的离线版本了；所以还真有点想放弃，老实交钱用回<code>1Password</code>了。</li></ol><blockquote><p>就在我准备放弃前，多搜索了一次。我拥抱了开源<del>穷逼不配1password</del></p></blockquote><ol start="2"><li><h3 id="发现宝藏"><a href="#发现宝藏" class="headerlink" title="发现宝藏"></a>发现宝藏</h3>在一次无意的搜索中，我发现了这款基于<code>KeePass</code>开发的第三方全平台支持的软件版本<a target="_blank" href="https://keepassxc.org/"><center><img src="/202011/recommend-keepass/keepassxc-logo.svg" class="" width="100"></center><center style="color:#30782f">KeePassXC</center></a></li></ol><p>一起先看看的截图</p><img src="/202011/recommend-keepass/welcome_screen.png" class=""><img src="/202011/recommend-keepass/database_view.png" class=""><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><ol><li><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>再放置个<a href="https://keepassxc.org/"><strong>传送门</strong></a><br>根据自己的系统下载匹配的<code>KeePassXC</code>软件,</p><img src="/202011/recommend-keepass/download_page.png" class=""><p>下载后按系统常用方式安装软件即可。</p></li><li><h3 id="生成密码库文件"><a href="#生成密码库文件" class="headerlink" title="生成密码库文件"></a>生成密码库文件</h3><blockquote><p>已用 KeePass 或其他第三方基于 KeePass 的软件生成的密码文件，可跳过此步骤，直接打开食用<br>安装完成后并打开后，如下图所示（软件语言多种，默认跟随系统语言）</p></blockquote><ol><li><p>点击 <code>新建数据库/Create new database</code> 弹出新建窗口</p><img src="/202011/recommend-keepass/welcome_screen.png" class=""></li><li><p>填写数据库名称，点击下一步。</p><img src="/202011/recommend-keepass/create_lib.png" class=""></li><li><p>加密设置，此步骤可直接下一步，亦可详细了解下，毕竟我的隐私不涉及 PY 交易，所以加密复杂度正常就好。（后面想改也可以改）</p><img src="/202011/recommend-keepass/setting_encrypt.png" class=""></li><li><p>密码设置，输入你的主密码，及再次输入后，确认并保存到存储的位置就完成啦。 &gt; 数据库的钥匙，唯一要记住的密码，每次数据库因限定时间未使用时或锁屏离开后锁定时，都需要输入这个密码解锁使用存储的密码。（主密码最好定期更换），有条件的亦可增加硬件设备使用，增强安全性。</p><img src="/202011/recommend-keepass/setting_main_password.png" class=""></li><li><p><strong>最后一个大问题</strong>：密码的存放</p></li></ol><p>因需要多平台使用，密码库的同步尤为重要；需要借助云盘完成。（当然，亦可以自架服务存储并使用）</p><p>推荐云盘：<code>oneDriver</code></p><p>那同步的位置好了后，接下来就只用把生成好的数据库文件放到云盘就 OK 啦。</p><img src="/202011/recommend-keepass/icloud.png" class=""></li><li><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>查看设置项，设置项可根据自己的习惯配置，我就不一一说明了。</li></ol><blockquote><p>其中需要注意的是 常规-&gt;基础设置-&gt;用户界面 记得勾选<code>最小化而不是退出应用程序</code>，保持程序启动。</p></blockquote><img src="/202011/recommend-keepass/base_setting.png" class=""><ol start="2"><li>下载浏览器扩展并配置连接数据库</li></ol><img src="/202011/recommend-keepass/setting_browser.png" class=""><p>如上图按需配置，并按所用的浏览器下载对应的扩展。进入浏览器扩展进行配置绑定即可</p><img src="/202011/recommend-keepass/bind_browser.jpg" class=""><ol start="3"><li>当我们打开浏览器登陆时，KeePassXC 会通过匹配链接后询问是否授权信息，确认后，当只有一个密码时就会直接自动输入到输入框了，该平台有多个账号时亦可点击输入框后切换。</li></ol><img src="/202011/recommend-keepass/browser_request.png" class=""><img src="/202011/recommend-keepass/browser_input.png" class=""><p>还有更多的细节等待你的摸索啦~</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sprite-free-cli 雪碧图命令行工具</title>
      <link href="/202011/sprites-cli-develop/"/>
      <url>/202011/sprites-cli-develop/</url>
      
        <content type="html"><![CDATA[<img src="/202011/sprites-cli-develop/cover.png" class="" width="0" height="0"><h2 id="小图的烦恼"><a href="#小图的烦恼" class="headerlink" title="小图的烦恼"></a>小图的烦恼</h2><p>项目中经常有不可避免的出现小图标，雪碧图依然是很多团队的选择，网上也有了各种各样的雪碧图插件或方案等。但大多数仅仅实现了简易的拼图及规则生成，我在项目中常常遇到两个小图需要在用户交互时切换等甚至更为复杂的需求；终于在百忙<del>懒癌绝症</del>之中搞了一个生成雪碧图的命令行小工具，望大家参考指教。</p><h2 id="sprite-free-cli"><a href="#sprite-free-cli" class="headerlink" title="sprite-free-cli"></a>sprite-free-cli</h2><p><a href="https://www.npmjs.com/package/sprite-free-cli"><img src="https://img.shields.io/npm/v/sprite-free-cli"></a></p><p>雪碧图生成的命令行工具，对范围目录下的特定文件夹批量合成雪碧图，仅需提供 js 处理样式规则生成，无需学习新的模板语言，高度自由化的 JS 逻辑控制生成；默认提供 4 种预处理语言的生成模板。</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><ul><li><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install sprite-free-cli -g<br></code></pre></td></tr></table></figure></li><li><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">sprite-free [options]<br><br>通过命令对指定目录范围内的所有以 -sprite 结尾的雪碧图文件夹，生成 雪碧图和样式 到生成目录，并生成雪碧图的对应样式文件。支持不同文件夹自定义生成规则<br><br>Options:<br>  -s, --scope [dir]  [必填]目录范围，目录范围内所有结尾 -sprite 结束的雪碧图文件夹<br>  -r, --rule [css|less|scss|stylus]   生成样式规则版本: css less scss stylus，默认 css。雪碧图文件夹内有特殊生成规则脚本 template.js 优先使用特殊生成规则<br>  -d, --dist [dir]   生成目录，默认 <span class="hljs-string">&quot;./&quot;</span>；目录范围scope 的相对路径<br></code></pre></td></tr></table></figure></li><li><h3 id="基础使用示例"><a href="#基础使用示例" class="headerlink" title="基础使用示例"></a>基础使用示例</h3><p>  <code>demo</code>目录下<code>demo-sprite</code>存储了等待合成的雪碧图原料。希望生成stylus的CSS规则文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sprite-free -s demo -r stylus<br></code></pre></td></tr></table></figure><p>通过命令即可在demo目录下生成 demo-sprite.styl 与 demo-sprite.png文件。</p></li><li><h3 id="自定义样式生成示例"><a href="#自定义样式生成示例" class="headerlink" title="自定义样式生成示例"></a>自定义样式生成示例</h3><p>  部分雪碧图在使用时希望支持一定的交互效果，如：某图标在移过去时变换成另一个图标时；即可通过自定义样式生成的方案，再自定义生成符合需求的CSS规则。</p><p>  仅需将在 相应的雪碧图文件夹内 如：<code>[name]-sprite</code>文件夹下，创建<code>template.js</code>文件，代码如下：</p><blockquote><p>当雪碧图文件夹下存在<code>template.js</code>时，该雪碧图文件夹的CSS规则生成仅以此为唯一的生成规则</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">spritesheet</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> spritesCSS = <span class="hljs-string">``</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(spritesheet.sprites)) &#123;<br>    spritesCSS = spritesheet.sprites<br>      .map(<span class="hljs-function">(<span class="hljs-params">sprite</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^van-/</span>.test(sprite.name)) &#123;<br>          name = <span class="hljs-string">`.<span class="hljs-subst">$&#123;sprite.name&#125;</span>`</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          name = <span class="hljs-string">`.&#123;$spriteName&#125;-<span class="hljs-subst">$&#123;sprite.name&#125;</span>`</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^tab-([\w]+)_a$/</span>.test(sprite.name)) &#123;<br>          name = <span class="hljs-string">&quot;.van-tabbar-item--active &quot;</span> + name.replace(<span class="hljs-string">&quot;_a&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/_a$/</span>.test(sprite.name)) &#123;<br>          name = name.replace(<span class="hljs-string">&quot;_a&quot;</span>, <span class="hljs-string">&quot;.active&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">          <span class="hljs-subst">$&#123;name&#125;</span> &#123;</span><br><span class="hljs-string">            <span class="hljs-subst">$&#123;sprite.name.indexOf(<span class="hljs-string">&quot;van-&quot;</span>) &gt; -<span class="hljs-number">1</span> ? <span class="hljs-string">&quot;@extend .&#123;$spriteName&#125;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>&#125;</span></span><br><span class="hljs-string">            background-position: ptr(-<span class="hljs-subst">$&#123;sprite.x&#125;</span>) ptr(-<span class="hljs-subst">$&#123;sprite.y&#125;</span>);</span><br><span class="hljs-string">            width: ptr(<span class="hljs-subst">$&#123;sprite.width&#125;</span>);</span><br><span class="hljs-string">            height: ptr(<span class="hljs-subst">$&#123;sprite.height&#125;</span>);</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        `</span>;<br>      &#125;)<br>      .join(<span class="hljs-string">&quot;&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">let</span> mainCSS = <span class="hljs-string">`</span><br><span class="hljs-string">      $spriteName= &quot;<span class="hljs-subst">$&#123;spritesheet.name&#125;</span>&quot;</span><br><span class="hljs-string">      .&#123;$spriteName&#125;&#123;</span><br><span class="hljs-string">          position: relative;</span><br><span class="hljs-string">          display: inline-block;</span><br><span class="hljs-string">          font-style: normal;</span><br><span class="hljs-string">          vertical-align: middle;</span><br><span class="hljs-string">          background-image: url(&quot;<span class="hljs-subst">$&#123;spritesheet.image&#125;</span>&quot;);</span><br><span class="hljs-string">          background-size: ptr(<span class="hljs-subst">$&#123;spritesheet.width&#125;</span>) ptr(<span class="hljs-subst">$&#123;spritesheet.height&#125;</span>);</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">      <span class="hljs-subst">$&#123;spritesCSS&#125;</span></span><br><span class="hljs-string">  `</span>;<br>  <span class="hljs-keyword">return</span> [mainCSS, <span class="hljs-string">&quot;styl&quot;</span>]; <span class="hljs-comment">//返回样式规则文本和文件后缀名</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>根据上面的自定义脚本将会导出如下样式。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$spriteName</span> = <span class="hljs-string">&#x27;demo&#x27;</span>;<br><br>.&#123;<span class="hljs-variable">$spriteName</span>&#125; &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">background-image</span>: url(<span class="hljs-string">&#x27;./demo-sprite.png&#x27;</span>);<br>  <span class="hljs-attribute">background-size</span>: ptr(<span class="hljs-number">285</span>) ptr(<span class="hljs-number">230</span>);<br>&#125;<br><br>.&#123;<span class="hljs-variable">$spriteName</span>&#125;-cart &#123;<br>  <span class="hljs-attribute">background-position</span>: ptr(<span class="hljs-number">0</span>) ptr(-<span class="hljs-number">140</span>);<br>  <span class="hljs-attribute">width</span>: ptr(<span class="hljs-number">46</span>);<br>  <span class="hljs-attribute">height</span>: ptr(<span class="hljs-number">40</span>);<br>&#125;<br><br>...<br><br>.&#123;<span class="hljs-variable">$spriteName</span>&#125;-tab-cart &#123;<br>  <span class="hljs-attribute">background-position</span>: ptr(-<span class="hljs-number">112</span>) ptr(-<span class="hljs-number">140</span>);<br>  <span class="hljs-attribute">width</span>: ptr(<span class="hljs-number">46</span>);<br>  <span class="hljs-attribute">height</span>: ptr(<span class="hljs-number">38</span>);<br>&#125;<br><br><span class="hljs-selector-class">.van-tabbar-item--active</span> .&#123;<span class="hljs-variable">$spriteName</span>&#125;-tab-cart &#123;<br>  <span class="hljs-attribute">background-position</span>: ptr(-<span class="hljs-number">56</span>) ptr(-<span class="hljs-number">140</span>);<br>  <span class="hljs-attribute">width</span>: ptr(<span class="hljs-number">46</span>);<br>  <span class="hljs-attribute">height</span>: ptr(<span class="hljs-number">38</span>);<br>&#125;<br><br>...<br><br><span class="hljs-selector-class">.van-checkbox__icon</span> &#123;<br>  <span class="hljs-keyword">@extend</span> .&#123;<span class="hljs-variable">$spriteName</span>&#125;;<br>  <span class="hljs-attribute">background-position</span>: ptr(-<span class="hljs-number">248</span>) ptr(-<span class="hljs-number">98</span>);<br>  <span class="hljs-attribute">width</span>: ptr(<span class="hljs-number">32</span>);<br>  <span class="hljs-attribute">height</span>: ptr(<span class="hljs-number">32</span>);<br>&#125;<br><br><span class="hljs-selector-class">.van-checkbox__icon</span><span class="hljs-selector-class">.van-checkbox__icon--checked</span> &#123;<br>  <span class="hljs-keyword">@extend</span> .&#123;<span class="hljs-variable">$spriteName</span>&#125;;<br>  <span class="hljs-attribute">background-position</span>: ptr(-<span class="hljs-number">248</span>) ptr(-<span class="hljs-number">140</span>);<br>  <span class="hljs-attribute">width</span>: ptr(<span class="hljs-number">32</span>);<br>  <span class="hljs-attribute">height</span>: ptr(<span class="hljs-number">32</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就可以通过自由的改变逻辑完成多变的需求啦。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rem 响应式网站适配解决方案</title>
      <link href="/202011/web-rem-resolve/"/>
      <url>/202011/web-rem-resolve/</url>
      
        <content type="html"><![CDATA[<img src="/202011/web-rem-resolve/cover.png" class="" width="0" height="0"><h2 id="REM-解决方案"><a href="#REM-解决方案" class="headerlink" title="REM 解决方案"></a>REM 解决方案</h2><h3 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h3><p>通过响应式设计稿尺寸不一的情况下，通过 <code>resize事件</code> 时判断窗口选用对应客户端的 <code>设计稿宽度</code> 运算，辅以 <code>@media响应式</code> 即可完美复现响应式的设计啦。</p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><blockquote><p>以需开发 <em>PC端</em> 和 <em>手机端</em> 的响应式项目为例</p></blockquote><ul><li><h4 id="将js代码放在-lt-head-gt-内，且不依赖任何插件以保证他最早被执行。"><a href="#将js代码放在-lt-head-gt-内，且不依赖任何插件以保证他最早被执行。" class="headerlink" title="将js代码放在 &lt;head&gt; 内，且不依赖任何插件以保证他最早被执行。"></a>将js代码放在 <code>&lt;head&gt;</code> 内，且不依赖任何插件以保证他最早被执行。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recal</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> docElement = <span class="hljs-built_in">document</span>.documentElement || <span class="hljs-built_in">document</span>.body;<br>    <br>    <span class="hljs-comment">// #region 可根据响应式需求自由调整逻辑</span><br>    <span class="hljs-keyword">let</span> clientWidth = docElement.clientWidth,<br>      designWidth = <span class="hljs-number">1200</span>; <span class="hljs-comment">//PC端设计稿宽度（主内容区域）</span><br><br>    <span class="hljs-keyword">if</span> (clientWidth &lt; <span class="hljs-number">750</span>) &#123; <span class="hljs-comment">// 客户端屏幕宽度小于一定尺寸时</span><br>      designWidth = <span class="hljs-number">640</span>; <span class="hljs-comment">//转为移动端设计稿宽度</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clientWidth &lt; designWidth) &#123;<span class="hljs-comment">// 客户端屏幕宽度小于 PC端设计稿宽度 但未需转换成 移动端设计 时</span><br>      clientWidth -= <span class="hljs-number">80</span> <br>      <span class="hljs-comment">// 解决在750~1200左右单独设计的情况，让内容主体的展示有一定的留白</span><br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//否则直接应用PC端设计稿宽度</span><br>      clientWidth = designWidth;<br>    &#125;<br>    <span class="hljs-comment">// #region </span><br>    docElement.style.fontSize = (clientWidth / designWidth) * <span class="hljs-number">100</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>  &#125;<br>  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;resize&quot;</span>, recal);<br>  recal();<br>&#125;)();<br></code></pre></td></tr></table></figure></li><li><h4 id="css预处理器编写函数-我这边用的是stylus"><a href="#css预处理器编写函数-我这边用的是stylus" class="headerlink" title="css预处理器编写函数(我这边用的是stylus)"></a>css预处理器编写函数(我这边用的是stylus)</h4><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs styl"><br><span class="hljs-function"><span class="hljs-title">ptr</span><span class="hljs-params">(px)</span></span>&#123;<br>  return unit((px / <span class="hljs-number">100</span>), <span class="hljs-string">&#x27;rem&#x27;</span>);<br>&#125;<br><br>body&#123;<br>  <span class="hljs-attribute">font-size</span>: ptr(<span class="hljs-number">12</span>)<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">1200px</span>)&#123;<br>  .container&#123;<br>    <span class="hljs-attribute">width</span>: ptr(<span class="hljs-number">1200</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">750px</span>)&#123;<br>  .container&#123;<br>    <span class="hljs-attribute">width</span>: ptr(<span class="hljs-number">750</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 解决方案 </tag>
            
            <tag> 响应式 </tag>
            
            <tag> 适配 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
